import discord
from discord.ext import commands
import re
import requests

# Configuration du bot
TOKEN = "MTM3MDM3NTE5MTU0NDQ2NzQ2Ng.GA87T5.kE498SuVMivtGp_mq3CdCOqZ_gKWH_AjkebuV0"  # Remplace par ton token Discord
PREFIX = "!"  # Pr√©fixe des commandes
API_URL = "https://jdm-api.demo.lirmm.fr/term/{}"

# Liste d'ingr√©dients et termes culinaires pour filtrer les mots pertinents
CULINARY_TERMS = [
    "tomate", "pomme de terre", "carotte", "oignon", "ail", "poivron", "courgette",
    "aubergine", "poulet", "boeuf", "porc", "poisson", "crevette", "riz", "p√¢tes",
    "huile", "beurre", "sel", "poivre", "sucre", "farine", "oeuf", "lait", "fromage",
    "sauce", "soupe", "salade", "pain", "vin", "√©pice", "herbes"
]

# Liste d'adjectifs pour d√©tecter les caract√©ristiques
ADJECTIVES = [
    "rouge", "vert", "jaune", "croustillant", "moelleux", "juteux", "sucr√©", "sal√©",
    "√©pic√©", "amer", "acide", "doux", "cr√©meux", "frit", "cuit", "cru"
]

# Initialisation du bot avec intents
intents = discord.Intents.default()
intents.message_content = True
bot = commands.Bot(command_prefix=PREFIX, intents=intents)

@bot.event
async def on_ready():
    """√âv√©nement d√©clench√© lorsque le bot se connecte √† Discord."""
    print(f"‚úÖ Bot connect√© en tant que {bot.user}")

@bot.command()
async def help2(ctx):
    """Commande !help : affiche les instructions d'utilisation du bot."""
    help_message = (
        "**Aide pour le Bot de Relations S√©mantiques**\n"
        "Ce bot extrait des relations s√©mantiques √† partir d'un texte pour un mot donn√©.\n\n"
        "**Commandes disponibles :**\n"
        f"- `{PREFIX}relations <mot> <texte>` : Analyse le texte et affiche les relations s√©mantiques pour le mot.\n"
        f"  Exemple : `{PREFIX}relations tomate √âmincer un oignon et cuire avec des tomates rouges.`\n"
        f"- `{PREFIX}help2` : Affiche ce message d'aide.\n\n"
        "**Notes :**\n"
        "- Le mot doit √™tre un terme culinaire (ex. : tomate, oignon, sauce).\n"
        "- Le texte doit contenir le mot pour que des relations soient d√©tect√©es.\n"
        "Pour plus d'info, contactez votre encadrant."
    )
    await ctx.send(help_message)

@bot.command()
async def relations(ctx, mot, *, texte):
    """Commande !relations <mot> <texte> : extrait les relations s√©mantiques pour le mot √† partir du texte."""
    if not mot or not texte:
        await ctx.send(
            f"‚ùå Usage : `{PREFIX}relations <mot> <texte>`\n"
            f"Exemple : `{PREFIX}relations tomate √âmincer un oignon et cuire avec des tomates rouges.`\n"
            f"Utilisez `{PREFIX}help` pour plus d'informations."
        )
        return

    mot = mot.lower().strip()
    texte = texte.lower().strip()

    # V√©rifier si le mot est un terme culinaire
    if mot not in CULINARY_TERMS:
        await ctx.send(
            f"‚ö†Ô∏è Le mot ¬´ {mot} ¬ª n'est pas reconnu comme un terme culinaire.\n"
            f"Essayez avec un ingr√©dient ou un terme comme : {', '.join(CULINARY_TERMS[:5])}, etc.\n"
            f"Utilisez `{PREFIX}help` pour plus d'informations."
        )
        return

    # V√©rifier si le mot appara√Æt dans le texte
    if mot not in texte:
        await ctx.send(
            f"‚ùå Le mot ¬´ {mot} ¬ª n'appara√Æt pas dans le texte fourni.\n"
            f"Utilisez `{PREFIX}help` pour plus d'informations."
        )
        return

    # Extraire les phrases du texte
    phrases = re.split(r'[.!?]+', texte)
    phrases = [p.strip() for p in phrases if p.strip() and mot in p]

    # Recherche des relations s√©mantiques
    relations = []
    for phrase in phrases:
        # Hyperonymie : "<mot> est un <autre_mot>"
        match_hyper = re.search(rf"{mot}\s+est\s+un\s+(\w+)", phrase)
        if match_hyper and match_hyper.group(1) in CULINARY_TERMS:
            relations.append({
                "type": "hyperonymie",
                "related": match_hyper.group(1),
                "context": phrase
            })

        # Caract√©ristique : "<mot> est <adjectif>"
        match_char = re.search(rf"{mot}\s+est\s+({'|'.join(ADJECTIVES)})", phrase)
        if match_char:
            relations.append({
                "type": "caract√©ristique",
                "related": match_char.group(1),
                "context": phrase
            })

        # Co-occurrence : autres termes culinaires dans la m√™me phrase
        for term in CULINARY_TERMS:
            if term != mot and term in phrase:
                relations.append({
                    "type": "relation fonctionnelle",
                    "related": term,
                    "context": phrase
                })

    # Si aucune relation n'est trouv√©e, tenter un appel √† l'API JDM (optionnel)
    if not relations:
        try:
            response = requests.get(API_URL.format(mot), timeout=5)
            response.raise_for_status()
            data = response.json()
            api_relations = data.get("relations", [])
            for rel in api_relations[:3]:  # Limiter √† 3 relations
                rel_name = rel.get("name", "inconnu")
                node_name = rel.get("node", {}).get("name", "inconnu")
                rel_type = rel.get("type", "type inconnu")
                relations.append({
                    "type": rel_type,
                    "related": node_name,
                    "context": "Extrait de l'API JeuxDeMots (texte non sp√©cifique)"
                })
        except requests.RequestException:
            pass  # Ignorer l'erreur API, on affiche juste les r√©sultats locaux

    # Afficher les r√©sultats
    if not relations:
        await ctx.send(f"‚ÑπÔ∏è Aucune relation s√©mantique trouv√©e pour ¬´ {mot} ¬ª dans le texte ou via l'API.")
        return

    resultats = [f"**Relations s√©mantiques pour ¬´ {mot} ¬ª :**"]
    for rel in relations[:5]:  # Limiter √† 5 relations
        ligne = f"üîó {rel['type']} ‚Üí **{rel['related']}**\n   üìú Contexte : ¬´ {rel['context']} ¬ª"
        resultats.append(ligne)

    await ctx.send("\n".join(resultats))

@bot.event
async def on_command_error(ctx, error):
    """Gestion des erreurs de commande : affiche un message d'aide."""
    if isinstance(error, commands.CommandNotFound):
        await ctx.send(
            f"‚ùå Commande inconnue. Utilisez `{PREFIX}help` pour voir les commandes disponibles."
        )
    elif isinstance(error, commands.MissingRequiredArgument):
        await ctx.send(
            f"‚ùå Arguments manquants. Exemple : `{PREFIX}relations tomate √âmincer un oignon et cuire avec des tomates rouges.`\n"
            f"Utilisez `{PREFIX}help` pour plus d'informations."
        )
    else:
        await ctx.send(
            f"‚ùå Une erreur s'est produite : {str(error)}\n"
            f"Utilisez `{PREFIX}help` pour plus d'informations."
        )

# Lancement du bot
bot.run(TOKEN)